    /**
     * Crée des véhicules pour les contribuables
     */
    private List<Vehicule> createVehicules(List<Contribuable> contribuables) {
        List<Vehicule> vehicules = new ArrayList<>();
        Random random = new Random(42);
        
        // Marques et modèles de véhicules
        String[][] marquesModeles = {
                {"TOYOTA", "Hilux"}, {"TOYOTA", "Land Cruiser"}, {"TOYOTA", "Corolla"},
                {"MERCEDES", "Classe C"}, {"MERCEDES", "Sprinter"}, {"MERCEDES", "GLE"},
                {"NISSAN", "Patrol"}, {"NISSAN", "Navara"}, {"NISSAN", "X-Trail"},
                {"MITSUBISHI", "Pajero"}, {"MITSUBISHI", "L200"}, {"MITSUBISHI", "ASX"},
                {"FORD", "Ranger"}, {"FORD", "Explorer"}, {"FORD", "F-150"}
        };
        
        // Pour chaque contribuable, créer entre 0 et 2 véhicules
        for (Contribuable contribuable : contribuables) {
            int nbVehicules = random.nextInt(3); // Entre 0 et 2 véhicules par contribuable
            
            for (int i = 0; i < nbVehicules; i++) {
                // Sélectionner une marque et un modèle aléatoires
                int index = random.nextInt(marquesModeles.length);
                String marque = marquesModeles[index][0];
                String modele = marquesModeles[index][1];
                
                // Année (entre 2010 et 2023)
                int annee = 2010 + random.nextInt(14);
                
                // Immatriculation
                String immatriculation = String.format("%03d", random.nextInt(1000)) + 
                        (char)('A' + random.nextInt(26)) + 
                        (char)('A' + random.nextInt(26)) + 
                        String.format("%02d", random.nextInt(100));
                
                // Numéro de châssis
                String numeroChassis = marque.substring(0, 3).toUpperCase() + "-" + 
                        String.format("%09d", random.nextInt(1000000000));
                
                // Date d'enregistrement (entre 1 et 5 ans dans le passé)
                Calendar cal = Calendar.getInstance();
                cal.add(Calendar.YEAR, -1 * (1 + random.nextInt(5)));
                Date dateEnregistrement = cal.getTime();
                
                // Créer le véhicule
                Vehicule vehicule = new Vehicule();
                vehicule.setMarque(marque);
                vehicule.setModele(modele);
                vehicule.setAnnee(annee);
                vehicule.setImmatriculation(immatriculation);
                vehicule.setNumeroChassis(numeroChassis);
                vehicule.setDateEnregistrement(dateEnregistrement);
                vehicule.setProprietaire(contribuable);
                
                vehicules.add(vehicule);
            }
        }
        
        logger.info("Création de {} véhicules", vehicules.size());
        return vehicules;
    }
    
    /**
     * Crée des plaques pour les véhicules
     */
    private List<Plaque> createPlaques(List<Vehicule> vehicules) {
        List<Plaque> plaques = new ArrayList<>();
        Random random = new Random(42);
        
        // Pour chaque véhicule, créer une plaque
        for (Vehicule vehicule : vehicules) {
            // Numéro de série
            String numeroSerie = "SER-" + vehicule.getImmatriculation();
            
            // Créer la plaque
            Plaque plaque = new Plaque();
            plaque.setNumeroSerie(numeroSerie);
            plaque.setDisponible(false);
            plaque.setNumplaque(vehicule.getImmatriculation());
            plaque.setVehicule(vehicule);
            
            plaques.add(plaque);
        }
        
        logger.info("Création de {} plaques", plaques.size());
        return plaques;
    }
    
    /**
     * Crée des certificats pour les véhicules
     */
    private List<Certificat> createCertificats(List<Vehicule> vehicules, List<Declaration> declarations, Agent agent) {
        List<Certificat> certificats = new ArrayList<>();
        Random random = new Random(42);
        
        // Pour chaque véhicule, créer un certificat
        for (int i = 0; i < vehicules.size(); i++) {
            Vehicule vehicule = vehicules.get(i);
            
            // Numéro de certificat
            String numero = "CERT-" + String.format("%06d", i + 1);
            
            // Date d'émission (entre 1 et 12 mois dans le passé)
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.MONTH, -1 * (1 + random.nextInt(12)));
            Date dateEmission = cal.getTime();
            
            // Date d'expiration (1 an après la date d'émission)
            cal.setTime(dateEmission);
            cal.add(Calendar.YEAR, 1);
            Date dateExpiration = cal.getTime();
            
            // Montant (entre 100 et 500)
            double montant = 100 + random.nextDouble() * 400;
            
            // Créer le certificat
            Certificat certificat = new Certificat();
            certificat.setNumero(numero);
            certificat.setDateEmission(dateEmission);
            certificat.setDateExpiration(dateExpiration);
            certificat.setMontant(montant);
            certificat.setVehicule(vehicule);
            certificat.setAgent(agent);
            
            // Associer une déclaration si disponible
            if (i < declarations.size()) {
                certificat.setDeclaration(declarations.get(i));
            }
            
            certificats.add(certificat);
        }
        
        logger.info("Création de {} certificats", certificats.size());
        return certificats;
    }
    
    /**
     * Crée des vignettes pour les véhicules
     */
    private List<Vignette> createVignettes(List<Vehicule> vehicules, Agent agent) {
        List<Vignette> vignettes = new ArrayList<>();
        Random random = new Random(42);
        
        // Pour chaque véhicule, créer une vignette
        for (int i = 0; i < vehicules.size(); i++) {
            Vehicule vehicule = vehicules.get(i);
            
            // Numéro de vignette
            String numero = "VIG-" + String.format("%06d", i + 1);
            
            // Date d'émission (entre 1 et 12 mois dans le passé)
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.MONTH, -1 * (1 + random.nextInt(12)));
            Date dateEmission = cal.getTime();
            
            // Date d'expiration (1 an après la date d'émission)
            cal.setTime(dateEmission);
            cal.add(Calendar.YEAR, 1);
            Date dateExpiration = cal.getTime();
            
            // Montant (entre 50 et 200)
            double montant = 50 + random.nextDouble() * 150;
            
            // Créer la vignette
            Vignette vignette = new Vignette();
            vignette.setNumero(numero);
            vignette.setDateEmission(dateEmission);
            vignette.setDateExpiration(dateExpiration);
            vignette.setMontant(montant);
            vignette.setVehicule(vehicule);
            vignette.setAgent(agent);
            
            vignettes.add(vignette);
        }
        
        logger.info("Création de {} vignettes", vignettes.size());
        return vignettes;
    }
